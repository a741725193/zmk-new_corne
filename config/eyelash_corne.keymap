#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&kp EQUAL   &kp Q                &kp W              &kp E            &kp R                    &kp T                          &kp UP_ARROW             &kp Y  &kp U                 &kp I             &kp O               &kp P                         &kp MINUS
&kp ESCAPE  &hrm LEFT_CONTROL A  &hrm LEFT_SHIFT S  &hrm LEFT_ALT D  &hrm LEFT_COMMAND LS(F)  &kp G                &kp LEFT  &kp ENTER     &kp RIGHT  &kp H  &hrm RIGHT_COMMAND J  &hrm RIGHT_ALT K  &hrm RIGHT_SHIFT L  &hrm RIGHT_CONTROL SEMICOLON  &kp APOS
&caps_word  &kp Z                &kp X              &kp C            &kp V                    &kp B  &kp K_MUTE              &kp DOWN                 &kp N  &kp M                 &kp COMMA         &kp DOT             &kp FSLH                      &kp PIPE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        Symbols {
            bindings = <
&none  &kp SINGLE_QUOTE        &kp LBRC                   &kp RBRC                    &kp DOUBLE_QUOTES            &kp DOT                    &none         &kp DOLLAR  &kp UNDERSCORE            &kp LBKT                         &kp RBKT                            &kp PERCENT               &none
&none  &hrm LEFT_CONTROL EXCL  &hrm LEFT_SHIFT LESS_THAN  &hrm LEFT_ALT GREATER_THAN  &hrm LEFT_COMMAND SEMICOLON  &kp POUND           &none  &none  &none  &kp PIPE    &hrm RIGHT_COMMAND COLON  &hrm RIGHT_ALT LEFT_PARENTHESIS  &hrm RIGHT_SHIFT RIGHT_PARENTHESIS  &hrm RIGHT_CONTROL QMARK  &none
&none  &kp CARET               &kp SLASH                  &kp STAR                    &kp NON_US_BACKSLASH         &kp GRAVE  &none           &none         &kp TILDE   &kp AMPERSAND             &kp EQUAL                        &kp PLUS                            &kp AT                    &none
            >;

            sensor-bindings = <&rgb_encoder>;
        };

        Numbers {
            bindings = <
&none  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                  &none         &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none
&none  &none   &none   &none   &none   &none            &none  &none  &none  &none   &none   &none   &none   &none   &none
&none  &none   &none   &none   &none   &none   &none           &none         &none   &none   &none   &none   &none   &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};

