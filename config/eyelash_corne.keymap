#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        rtab {
            bindings = <&kp TAB>;
            key-positions = <23 25>;
        };

        ltab {
            bindings = <&kp TAB>;
            key-positions = <17 15>;
        };

        lal {
            bindings = <&kp LEFT_ALT>;
            key-positions = <14 15>;
        };

        ral {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <25 26>;
        };

        lct {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <15 16>;
        };

        rct {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <25 24>;
        };

        lsh {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <16 17>;
        };

        rsh {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <23 24>;
        };

        lal_ct {
            bindings = <&kp LA(LEFT_CONTROL)>;
            key-positions = <14 15 16>;
        };

        ral_ct {
            bindings = <&kp RA(RIGHT_CONTROL)>;
            key-positions = <24 25 26>;
        };

        lct_sh {
            bindings = <&kp LS(LEFT_CONTROL)>;
            key-positions = <15 16 17>;
        };

        rct_sh {
            bindings = <&kp RS(RIGHT_CONTROL)>;
            key-positions = <23 24 25>;
        };

        lsh_al {
            bindings = <&kp LS(LEFT_ALT)>;
            key-positions = <16 17 18>;
        };

        rsh_al {
            bindings = <&kp RS(RIGHT_ALT)>;
            key-positions = <22 23 24>;
        };

        lsh_ct_al {
            bindings = <&kp LS(LA(LEFT_CONTROL))>;
            key-positions = <14 15 16 17>;
        };

        rsh_ct_al {
            bindings = <&kp RS(RA(RIGHT_CONTROL))>;
            key-positions = <23 24 25 26>;
        };

        kana {
            bindings = <&kp LA(GRAVE)>;
            key-positions = <31 32>;
        };
    };

    behaviors {
        rot_scr: rot_scr {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ROT_SCR";
            #sensor-binding-cells = <2>;
            bindings = <&rot_ur>, <&rot_dl>;
        };

        rot_ur: rot_ur {
            compatible = "zmk,behavior-mod-morph";
            label = "ROT_UR";
            bindings = <&kp PAGE_UP>, <&kp LA(PAGE_DOWN)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rot_dl: rot_dl {
            compatible = "zmk,behavior-mod-morph";
            label = "ROT_DL";
            bindings = <&kp PAGE_DOWN>, <&kp LA(PAGE_UP)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rot_und_zd: rot_und_zd {
            compatible = "zmk,behavior-mod-morph";
            label = "ROT_UND_ZD";
            bindings = <&kp LC(Z)>, <&kp LC(MINUS)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rot_red_zu: rot_red_zu {
            compatible = "zmk,behavior-mod-morph";
            label = "ROT_RED_ZU";
            bindings = <&kp LS(LC(Z))>, <&kp LC(EQUAL)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rot_ur_z: rot_ur_z {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ROT_UR_Z";
            #sensor-binding-cells = <2>;
            bindings = <&rot_red_zu>, <&rot_und_zd>;
        };
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
            // 追加: スクロールのタップ時間を設定 (20ms)
            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp LBKT  &kp Q  &kp W  &kp E             &kp R                    &kp T                                        &mmv MOVE_UP                     &kp Y        &kp U                  &kp I                        &kp O       &kp P      &to 1
&kp RBKT  &kp A  &kp S  &kp D             &kp F                    &kp G                        &mmv MOVE_LEFT  &mkp MB1        &mmv MOVE_RIGHT  &kp H        &kp J                  &kp K                        &kp L       &kp MINUS  &kp SEMICOLON
&kp APOS  &kp Z  &kp X  &kp C             &kp V                    &kp B            &mkp MB2                    &mmv MOVE_DOWN                   &kp N        &kp M                  &kp COMMA                    &kp PERIOD  &kp SLASH  &kp EQUAL
                        &mt LEFT_GUI ESC  &mt LEFT_CONTROL DELETE  &lt 2 BACKSPACE                                                               &lt 3 SPACE  &mt RIGHT_SHIFT ENTER  &mt RIGHT_GUI K_APPLICATION
            >;

            sensor-bindings = <&rot_ur_z 0 0>;
        };

        QLU {
            display-name = "QLU";
            bindings = <
&trans  &kp Q  &kp L  &kp U   &kp COMMA  &kp DOT                      &trans          &kp F   &kp W   &kp R   &kp Y  &kp P  &to 0
&trans  &kp E  &kp I  &kp A   &kp O      &kp MINUS            &trans  &trans  &trans  &kp K   &kp T   &kp N   &kp S  &kp H  &trans
&trans  &kp Z  &kp X  &kp C   &kp V      &kp SLASH  &trans            &trans          &kp G   &kp D   &kp M   &kp J  &kp B  &trans
                      &trans  &trans     &trans                                       &trans  &trans  &trans
            >;

            sensor-bindings = <&rot_ur_z 0 0>;
        };

        left {
            display-name = "left";
            bindings = <
&kp BACKSLASH  &kp HOME  &kp PG_UP        &kp UP       &kp PG_DN  &kp LC(PAGE_UP)                      &trans            &kp N6     &kp N7  &kp N8  &kp N9        &kp N0     &kp DOT
&kp GRAVE      &kp END   &kp LEFT         &kp DOWN     &kp RIGHT  &kp LC(PAGE_DOWN)            &trans  &mkp MB3  &trans  &kp BSPC   &kp N4  &kp N5  &kp N6        &kp MINUS  &kp EQUAL
&trans         &trans    &kp LS(LC(TAB))  &kp LC(TAB)  &mkp MB1   &mkp MB2           &trans            &trans            &kp COMMA  &kp N1  &kp N2  &kp NUMBER_3  &kp SEMI   &kp FSLH
                                          &trans       &trans     &trans                                                 &trans     &trans  &trans
            >;
        };

        right {
            display-name = "right";
            bindings = <
&trans  &kp N1   &kp N2   &kp N3  &kp N4  &kp N5                    &trans            &kp HOME  &kp PG_UP  &kp UP           &kp PG_DN    &kp RC(PAGE_UP)    &trans
&kp F3  &kp F12  &kp F10  &kp F6  &kp F2  &kp F5            &trans  &mkp MB3  &trans  &kp END   &kp LEFT   &kp DOWN         &kp RIGHT    &kp RC(PAGE_DOWN)  &trans
&kp F1  &kp F9   &kp F11  &kp F8  &kp F7  &kp F4  &trans            &trans            &mkp MB1  &mkp MB2   &kp RC(RS(TAB))  &kp RC(TAB)  &trans             &trans
                          &trans  &trans  &trans                                      &trans    &trans     &trans
            >;

            sensor-bindings =  <&scroll_up_down>;
        };

        conf {
            display-name = "conf";
            bindings = <
&out OUT_TOG     &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                       &trans          &trans  &trans      &trans             &trans           &bl BL_INC  &bl BL_TOG
&bt BT_CLR_ALL   &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF            &trans  &trans  &trans  &trans  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &bl BL_DEC  &bl BL_CYCLE
&rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &trans            &trans          &trans  &trans      &trans             &trans           &trans      &trans
                                                   &trans           &trans           &trans                                             &trans  &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        conf {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
