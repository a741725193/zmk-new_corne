#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
                hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";
        QWERTY {
            bindings = <
            &kp EQUAL   &kp Q                &kp W              &kp E            &kp R            &kp T     &kp Y   &kp U                 &kp I             &kp O               &kp P                         &kp MINUS
            &kp ESC     &hrm LEFT_CONTROL A  &hrm LS(LSHIFT) S  &hrm D LEFT_ALT  &hrm LEFT_GUI F  &kp G     &kp H   &hrm RIGHT_COMMAND J  &hrm RIGHT_ALT K  &hrm RIGHT_SHIFT L  &hrm RIGHT_CONTROL SEMICOLON  &kp APOS
            &caps_word  &kp Z                &kp X              &kp C            &kp V            &kp B     &kp N   &kp M                 &kp COMMA         &kp DOT             &kp FSLH                      &none
                                                                &kp SPACE        &kp BSPC         &tog 1    &tog 2  &kp TAB               &kp ENTER
                        >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        Symbols {
            bindings = <
            &none  &kp SINGLE_QUOTE  &kp LBRC  &kp RBRC  &none     &none       &none  &kp DOLLAR  &kp UNDERSCORE  &kp LBKT              &kp RBKT               &kp PERCENT
            &none  &kp EXCL          &kp LT    &kp GT    &kp SEMI  &kp SEMI    &none  &kp PIPE    &kp COLON       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QMARK
            &none  &kp LSHFT         &kp FSLH  &kp STAR  &kp BSLH  &none       &none  &none       &kp AMPERSAND   &kp EQUAL             &kp PLUS               &kp AT_SIGN
                                               &none     &none     &none       &none  &none       &none
                        >;

            sensor-bindings = <&rgb_encoder>;

        };

        Numbers {
            bindings = <
            &none  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none
            &none  &none   &none   &none   &none   &none     &none   &none   &none   &none   &none   &none
            &none  &none   &none   &none   &none   &none     &none   &none   &none   &none   &none   &none
                                   &none   &none   &none     &none   &none   &none
                        >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

};
