#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    combos {
        compatible = "zmk,combos";

        rtab {
            bindings = <&kp TAB>;
            key-positions = <23 22>;
        };

        ltab {
            bindings = <&kp TAB>;
            key-positions = <17 18>;
        };

        lsh {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <14 15>;
        };

        rsh {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <25 26>;
        };

        lct {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <15 16>;
        };

        rct {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <25 24>;
        };

        lal {
            bindings = <&kp LEFT_ALT>;
            key-positions = <16 17>;
        };

        ral {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <23 24>;
        };

        lsh_ct {
            bindings = <&kp LS(LEFT_CONTROL)>;
            key-positions = <14 15 16>;
        };

        rsh_ct {
            bindings = <&kp RS(RIGHT_CONTROL)>;
            key-positions = <24 25 26>;
        };

        lct_al {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <15 16 17>;
        };

        rct_al {
            bindings = <&kp RC(RIGHT_ALT)>;
            key-positions = <23 24 25>;
        };

        lsh_al {
            bindings = <&kp LS(LEFT_ALT)>;
            key-positions = <16 17 18>;
        };

        rsh_al {
            bindings = <&kp RS(RIGHT_ALT)>;
            key-positions = <22 23 24>;
        };

        lsh_ct_al {
            bindings = <&kp LS(LA(LEFT_CONTROL))>;
            key-positions = <14 15 16 17>;
        };

        rsh_ct_al {
            bindings = <&kp RS(RA(RIGHT_CONTROL))>;
            key-positions = <23 24 25 26>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp PRINTSCREEN  &kp Q  &kp W  &kp E             &kp R                    &kp T                                   &kp UP                &kp Y        &kp U                &kp I                   &kp O       &kp P      &to 1
&kp TAB          &kp A  &kp S  &kp D             &kp F                    &kp G                         &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &kp J                &kp K                   &kp L       &kp MINUS  &kp SEMICOLON
&kp LA(GRAVE)    &kp Z  &kp X  &kp C             &kp V                    &kp B            &kp SPACE              &kp DOWN              &kp N        &kp M                &kp COMMA               &kp PERIOD  &kp SLASH  &kp EQUAL
                               &mt LEFT_ALT ESC  &mt LEFT_CONTROL DELETE  &lt 2 BACKSPACE                                               &lt 3 SPACE  &mt RIGHT_GUI ENTER  &mt RALT K_APPLICATION
            >;
        };

        olu {
            bindings = <
&trans  &kp Q  &kp L  &kp U   &kp COMMA  &kp DOT                      &trans          &kp F   &kp W   &kp R   &kp Y  &kp P  &to 0
&trans  &kp E  &kp I  &kp A   &kp O      &kp MINUS            &trans  &trans  &trans  &kp K   &kp T   &kp N   &kp S  &kp H  &trans
&trans  &kp Z  &kp X  &kp C   &kp V      &kp SLASH  &trans            &trans          &kp G   &kp D   &kp M   &kp J  &kp B  &trans
                      &trans  &trans     &trans                                       &trans  &trans  &trans
            >;
        };

        left {
            display-name = "left";
            bindings = <
&trans  &kp HOME  &kp PG_UP  &kp UP         &kp PG_DN  &kp LBKT                       &none         &kp N6     &kp N7  &kp N8  &kp N9        &kp N0     &kp DOT
&trans  &kp END   &kp LEFT   &kp DOWN       &kp RIGHT  &kp RBKT                &none  &none  &none  &kp BSPC   &kp N4  &kp N5  &kp N6        &kp MINUS  &kp EQUAL
&trans  &trans    &trans     &kp BACKSLASH  &mkp MB1   &mkp MB2  &kp C_MUTE           &none         &kp COMMA  &kp N1  &kp N2  &kp NUMBER_3  &kp SEMI   &kp FSLH
                             &trans         &trans     &trans                                       &trans     &trans  &trans
            >;
        };

        right {
            display-name = "right";
            bindings = <
&trans  &kp N1   &kp N2   &kp N3  &kp N4  &kp N5                   &none         &kp HOME  &kp PG_UP  &kp UP    &kp PG_DN  &kp SQT  &trans
&trans  &kp F12  &kp F10  &kp F6  &kp F2  &kp F5            &none  &none  &none  &kp END   &kp LEFT   &kp DOWN  &kp RIGHT  &kp F3   &trans
&trans  &trans   &trans   &kp F8  &kp F7  &kp F4  &trans           &none         &kp F11   &kp F9     &kp F1    &trans     &trans   &trans
                          &trans  &trans  &trans                                 &trans    &trans     &trans
            >;
        };

        conf {
            display-name = "conf";
            bindings = <
&out OUT_TOG     &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                          &none         &none   &none   &none        &none       &none  &trans
&rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF                &none  &none  &none  &none   &none   &none        &none       &none  &none
&trans           &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &kp C_MUTE           &none         &trans  &trans  &bootloader  &sys_reset  &none  &none
                                                   &trans           &trans           &trans                                              &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        onisi {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
